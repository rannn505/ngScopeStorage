!function(t,e){"use strict";function n(){function n(t){if("object"!=typeof t)throw new TypeError(r+"- set_scope must get a object.");if(!t&&!e.isDefined(t))throw new SyntaxError(r+"- set_scope must get a value");g=t}function o(t){if("string"!=typeof t)throw new TypeError(r+"- set_ctrlName must get a string.");if(!t&&!e.isDefined(t))throw new SyntaxError(r+"- set_ctrlName must get a value");p=t}function i(t){if("string"!=typeof t)throw new TypeError(r+"- set_prefix must get a string.");if(""===t)throw new SyntaxError(r+"- set_prefix must`nt get an empty string");c=t}function s(e){if("string"!=typeof e)throw new TypeError(r+"- set_storageType must get a string.");if(""===e)throw new SyntaxError(r+"- set_storageType must`nt get an empty string");if("localstorage"!==e&&"sessionStorage"!==e)throw new SyntaxError(r+"- set_storageType got an invalid string");u=e,m=t[u]}function a(t){if("string"!=typeof t)throw new TypeError(r+"- set_onReload must get a string.");if(""===t)throw new SyntaxError(r+"- set_onReload must`nt get an empty string");if("save"!==t&&"empty"!==t)throw new SyntaxError(r+"- set_onReload got an invalid string");y=t}function f(t){for(var e in t)(-1!=e.indexOf(c)||e.indexOf(p))&&t.removeItem(e)}var g=null,p=null,c="vms",u="localStorage",y="empty",m=t[u];this.$get=[function(){function t(){var t;"empty"==y?(f(m),t=function(t){u(t)}):t=function(t){r(t)},w.prefix=c+":"+p+"::",Object.observe(w,t)}function r(t){t.forEach(function(t){var e=t.name;g[e]=t.object[e],"add"==t.type?m.getItem(c+":"+p+"::"+e)||m.setItem(c+":"+p+"::"+e,g[e]):m.setItem(c+":"+p+"::"+e,g[e])}),g.$apply()}function u(t){t.forEach(function(t){var e=t.name;g[e]=t.object[e],m.setItem(c+":"+p+"::"+e,g[e])}),g.$apply()}var w={};return w.config=function(r){n(r.scope),o(r.ctrlName),e.isDefined(r.prefix)&&i(r.prefix),e.isDefined(r.storageType)&&s(r.storageType),e.isDefined(r.onReload)&&a(r.onReload),t()},w}]}var r="ngScopeStorage",o=e.module("ngScopeStorage",[]);o.provider("$vms",n)}(window,window.angular);
//# sourceMappingURL=data:application/json;base64,
